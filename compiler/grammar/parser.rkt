#lang racket
(require   parser-tools/yacc
           "lexer.rkt"
           "token.rkt"
           "ast.rkt"
           )
(provide file-parser single-parser eval-parser)


(define-values (file-parser single-parser eval-parser)
 (apply values
  (parser
   (start file_input single_input eval_input)
   (end EOF)
   (error err)
   (tokens tokens empty-tokens)
   (src-pos)
   ;(debug "parser.output")
   ;(suppress)
 (grammar
  (single_input
   ((NEWLINE) empty)
   ((simple_stmt) $1)
   ((compound_stmt) $1))
   (file_input (() null)
               ((file_input NEWLINE) $1)
               ((file_input stmt) `(,@$1 ,$2)))
   (eval_input ((testlist)$1)
               ((eval_input NEWLINE #|ENDMARKER|#) $1))
  (decorator
   ((@ dotted_name NEWLINE) `#s(decorator ,$1-start-pos ,$3-end-pos ,$2 #f))
   ((@ dotted_name |(| |)| NEWLINE) `#s(decorator ,$1-start-pos ,$5-end-pos ,$2 '()))
   ((@ dotted_name |(| arglist |)| NEWLINE) `#s(decorator ,$1-start-pos ,$6-end-pos ,$2 ,$4)))
  (decorators ((decorator)(list $1))
              ((decorator decorators)(cons $1 $2)))
  (decorated
   ((decorators classdef) `#s(decorated ,$1-start-pos ,$2-end-pos ,$1 ,$2))
   ((decorators funcdef) `#s(decorated ,$1-start-pos ,$2-end-pos ,$1 ,$2)))
  (funcdef
   ((def NAME parameters : suite)  (funcdef  $2-start-pos $5-end-pos  (string->symbol $2)  $3  $5 #f))
   ((def NAME parameters -> test : suite)  (funcdef  $2-start-pos  $5-end-pos  (string->symbol $2)  $3  $7  $5)))
  (parameters ((|(| |)|) empty)
              ((|(| typedargslist |)|)  $2))
  (tplist ((** tfpdef)(list `#s(dict ,$2)))
          ((tfpdef)(list  (pos  $1)))
          ((tfpdef = test)(list `#s(key ,$1 ,$3)))
          ((tfpdef |,| tplist)(cons  (pos  $1) $3))
          ((tfpdef = test |,| tplist)(cons `#s(key ,$1,$3) $5)))
  (typedargslist((** tfpdef)(list `#s(dict ,$2)))
                ((* tfpdef)(list `#s(seq ,$2)))
                ((*)(list `#s(seq #f)))
                ((* tfpdef |,| tplist)(cons `#s(seq ,$2)$4))
                ((*  |,| tplist)(cons `#s(seq #f)$3))
                ((tfpdef |,|)  (list  (pos  $1)))
                ((tfpdef = test |,|) `(#s(key ,$1 ,$3)))
                ((tfpdef)  (list  (pos $1)))
                ((tfpdef = test) `(#s(key ,$1 ,$3)))
                ((tfpdef |,| typedargslist) (cons  (pos  $1) $3))
                ((tfpdef = test |,| typedargslist) (cons `#s(key ,$1 ,$3) $5)))
  (tfpdef ((NAME)  $1)
          ((NAME : test)  `#s(name-test ,$1 ,$3)))
  (vplist ((** vfpdef)(list `#s(dict ,$2)))
          ((vfpdef)(list `#s(pos ,$1)))
          ((vfpdef = test)(list `#s(key ,$1 ,$3)))
          ((vfpdef |,| vplist)(cons `#s(pos ,$1) $3))
          ((vfpdef = test |,| vplist)(cons `#s(key ,$1,$3) $5)))
 (varargslist   ((** vfpdef)(list `#s(dict ,$2)))
                ((* vfpdef)(list `#s(seq ,$2)))
                ((*)(list `#s(seq #f)))
                ((* vfpdef |,| vplist)(cons `#s(seq ,$2)$4))
                ((*  |,| vplist)(cons `#s(seq #f)$3))
                ((vfpdef |,|) `(#s(pos ,$1)))
                ((vfpdef = test |,|) `(#s(key ,$1 ,$3)))
                ((vfpdef) `((pos ,$1)))
                ((vfpdef = test) `(#s(key ,$1 ,$3)))
                ((vfpdef |,| varargslist) (cons `#s(pos ,$1) $3))
                ((vfpdef = test |,| varargslist) (cons `#s(key ,$1 ,$3) $5)))
  (vfpdef ((NAME) $1))
  (stmt ((simple_stmt) $1)
        ((compound_stmt) $1))
  (small_stmt-lst  ((small_stmt |;|)(list $1))
                   ((small_stmt |;| small_stmt)(list $1 $3))
                   ((small_stmt |;| small_stmt-lst)(cons $1 $3)))
  (simple_stmt ((small_stmt-lst NEWLINE) $1)
               ((small_stmt NEWLINE)$1))
  (small_stmt
   ((expr_stmt) $1)
   ((del_stmt) $1)
   ((pass_stmt) $1)
   ((flow_stmt) $1)
   ((import_stmt) $1)
   ((global_stmt) $1)
   ((nonlocal_stmt) $1)
   ((assert_stmt) $1))
  (augassign
   ((+=) '+=)
   ((-=) '-=)
   ((*=) '*=)
   ((/=) '/=)
   ((%=) '%=)
   ((&=) '&=)
   ((\|=) '\|=)
   ((^=) '^=)
   ((<<=) '<<=)
   ((>>=) '>>=)
   ((**=) '**=)
   ((//=) '//=))
  (expr_stmt
   ((testlist_star_expr)$1)
   ((testlist_star_expr augassign yield_expr) (augassign_stmt $1-start-pos $3-end-pos $1 $2 $3))
   ((testlist_star_expr augassign testlist) (augassign_stmt $1-start-pos $3-end-pos $1 $2 $3))
   ((testlist_star_expr := testlist_star_expr) (definition $1-start-pos $3-end-pos $1 $3))
   ((testlist_star_expr = yield_expr-or-testlist_star_expr-lst) (assign_stmt $1-start-pos $3-end-pos (cons $1 $3))))
  (yield_expr-or-testlist_star_expr ((yield_expr)$1)
                                    ((testlist_star_expr)$1))
  (yield_expr-or-testlist_star_expr-lst((yield_expr-or-testlist_star_expr)(list $1))
                                       ((yield_expr-or-testlist_star_expr = yield_expr-or-testlist_star_expr-lst)(cons $1 $3)))
  
  (test-or-start((test)$1)
                ((star_expr)$1))
  (test-or-start-lst((test-or-start |,|)(list $1))
                    ((test-or-start |,| test-or-start)(list $1 $3))
                    ((test-or-start |,| test-or-start-lst)(cons $1 $3)))
  (testlist_star_expr
   ((test-or-start)  $1)
   ((test-or-start-lst)$1))
  (del_stmt ((del exprlist) `#s(del_stmt ,$1-start-pos ,$2-end-pos  ,$2)))
  (pass_stmt ((pass) #s(pass_stmt)))
  (flow_stmt
   ((break_stmt) $1)
   ((continue_stmt) $1)
   ((return_stmt) $1)
   ((raise_stmt) $1)
   ((yield_stmt) $1))
  (break_stmt ((break) `#s(break_stmt ,$1-start-pos ,$1-end-pos)))
  (continue_stmt ((continue) `#s(continue_stmt ,$1-start-pos ,$1-end-pos)))
  (return_stmt ((return)  (return_stmt  $1-start-pos  $1-end-pos #f))
               ;((return test)`#s(return_stmt ,$1-start-pos ,$2-end-pos ,$2))
               ((return testlist) (return_stmt  $1-start-pos  $2-end-pos  $2)))
  (yield_stmt ((yield_expr) $1))
  (raise_stmt
   ((raise) `#s(raise_stmt ,$1-start-pos ,$1-end-pos #f #f))
   ((raise test) `#s(raise_stmt ,$1-start-pos ,$1-end-pos ,$2 #f))
   ((raise test from test) `#s(raise_stmt ,$1-start-pos ,$1-end-pos ,$2 ,$4)))
  (import_stmt ((import_name) $1)
               ((import_from) $1))
  (import_name ((import dotted_as_names)
                `#s(import_name ,$1-start-pos ,$2-end-pos ,$2)))
  (import_from_path((dotted_name)(list $1))
                   ((|.|)(list 'same))
                   ((...)(list 'up))
                   ((|.| import_from_path)(cons 'same $2))
                   ((... import_from_path)(cons 'up   $2)))
  (import_from
   ((from import_from_path  import *) `#s(import_from ,$1-start-pos ,$4-end-pos ,$2 #f))
   ((from import_from_path  import |(| import_as_names |)|) `#s(import_from ,$1-start-pos ,$6-end-pos ,$2 ,$5))
   ((from import_from_path  import import_as_names) `#s(import_from ,$1-start-pos ,$4-end-pos ,$2 ,$4)))
  (import_as_name ((NAME) `#s(import_as_name ,$1 #f))
                  ((NAME as NAME) `#s(import_as_name ,$1 ,$3)))
  (dotted_as_name
   ((dotted_name)`#s(dotted_as_name ,$1 #f))
   ((dotted_name as NAME) `#s(dotted_as_name ,$1 ,$3)))
  (import_as_names-mutlti ((import_as_name |,|)(list $1))
                          ((import_as_name |,| import_as_name)(list $1 $3))
                          ((import_as_name |,| import_as_names-mutlti)(cons $1 $3)))
  (import_as_names((import_as_name)$1)
                  ((import_as_names-mutlti)$1))
  (dotted_as_names ((dotted_as_name)(list $1))
                   ((dotted_as_name |,| dotted_as_names)(cons $1 $3)))
  (dotted_name ((NAME)(list $1))
               ((NAME |.| dotted_name) (cons $1 $3)))
  (name-lst ((NAME)(list (string->symbol $1)))
            ((NAME |,| name-lst)(cons (string->symbol $1) $3)))
  (global_stmt ((global name-lst)  (global_stmt  $1-start-pos  $2-end-pos $2)))
  (nonlocal_stmt ((nonlocal name-lst)  (nonlocal_stmt  $1-start-pos  $2-end-pos  $2)))
  (assert_stmt ((assert test) `#s(assert_stmt ,$1-start-pos ,$2-end-pos ,$2 #f))
               ((assert test |,| test) `#s(assert_stmt ,$1-start-pos ,$2-end-pos ,$2 ,$4)))
  (compound_stmt
   ((if_stmt) $1)
   ((while_stmt) $1)
   ((for_stmt) $1)
   ((try_stmt) $1)
   ((with_stmt) $1)
   ((funcdef) $1)
   ((classdef) $1)
   ((decorated) $1))
  (else_if_stmt_item ((elif test : suite) (testbody $2 $4)))
  (else_if_stmt_list (() empty) ((else_if_stmt_item else_if_stmt_list) (cons $1 $2)))
  (if_stmt
   ((if test : suite else_if_stmt_list) (if_stmt $1-start-pos $5-end-pos (cons (testbody $2 $4) $5) #f)) 
   ((if test : suite else_if_stmt_list else : suite)  (if_stmt $1-start-pos $5-end-pos (cons (testbody $2 $4) $5) $8)))
  (while_stmt
   ((while test : suite)  (while_stmt  $1-start-pos  $4-end-pos  $2  $4 #f))
   ((while test : suite else : suite)  (while_stmt  $1-start-pos  $7-end-pos  $2  $4  $7)))
  (for_stmt
   ((for exprlist in testlist : suite) (for_stmt  $2 $4 $6 #f))
   ((for exprlist in testlist : suite else : suite) (for_stmt  $2 $4 $6 $9)))
  (except_clause_item ((except_clause : suite)  $3))
  (_try_stmt_item_noemptylist ((except_clause_item) $1) ((except_clause_item _try_stmt_item_noemptylist) (cons $1 $2)))
  (try_stmt
   ((try : suite _try_stmt_item_noemptylist) `#s(try_stmt ,$1-start-pos ,$4-end-pos ,$3 ,$4 #f #f))
   ((try : suite _try_stmt_item_noemptylist finally : suite) `#s(try_stmt ,$1-start-pos ,$7-end-pos ,$3 ,$4 #f ,$7))
   ((try : suite _try_stmt_item_noemptylist else : suite) `#s(try_stmt ,$1-start-pos ,$7-end-pos ,$3 ,$4 ,$7 #f))
   ((try : suite _try_stmt_item_noemptylist else : suite finally : suite) `#s(try_stmt ,$1-start-pos ,$10-end-pos ,$3 ,$4 ,$7 ,$10))
   ((try : suite finally : suite) `#s(try_stmt ,$1-start-pos ,$6-end-pos ,$3 #f #f ,$6)))
  (with_item_list((with_item)(list $1))
                 ((with_item |,| with_item_list)(cons $1 $3)))
  (with_stmt ((with with_item_list : suite) `#s(with_stmt ,$1-start-pos $4-end-pos $2 $4)))
  (with_item ((test) `#s(with_item ,$1 #f))
             ((test as expr) `#s(with_item ,$1 ,$3)))
  (except_clause
   ((except) `#s(except_clause #f #f))
   ((except test) `#s(except_clause ,$2 #f))
   ((except test as NAME) `#s(except_clause ,$2 ,$4)))
  (stmt-list ((stmt)(list $1))
             ((stmt stmt-list)(cons $1 $2)))
  (suite
   ((simple_stmt) `#s(suite ,(list $1)))
   ((NEWLINE INDENT stmt-list DEDENT) `#s(suite ,$3)))
  (test
   ((or_test) $1)
   ((or_test if or_test else test) `#s(conditional ,$1-start-pos ,$5-end-pos ,$1 ,$3 ,$5))
   ((lambdef) $1))
  (test_nocond ((or_test) $1)
               ((lambdef_nocond) $1))
  (lambdef
   ((lambda : test) `#s(lambdef ,$1-start-pos ,$3-end-pos #f ,$3))
   ((lambda varargslist : test) `#s(lambdef ,$1-start-pos ,$4-end-pos ,$2 ,$4)))
  (lambdef_nocond
   ((lambda : test_nocond) `#s(lambdef_nocond ,$1-start-pos ,$3-end-pos #f ,$3))
   ((lambda varargslist : test_nocond) `#s(lambdef_nocond ,$1-start-pos ,$4-end-pos ,$2 ,$4)))
  (or_test ((and_test) $1)
           ((and_test or or_test)`#s(binary or ,$1 ,$3)))
  (and_test ((not_test) $1)
            ((not_test and and_test)`#s(binary and ,$1 ,$3)))
  (not_test ((comparison)  $1)
            ((not not_test) `#s(unary not ,$2)))
  (comparison ((expr)  $1)
              ((expr comp_op  comparison)`#s(binary ,$2 ,$1 ,$3)))
  (comp_op
   ((<) '<)
   ((>) '>)
   ((==) '==)
   ((>=) '>=)
   ((<=) '<=)
   ((<>) '<>)
   ((!=) '!=)
   ((in) 'in)
   ((not in) 'notin)
   ((is) 'is)
   ((is not) 'isnot))
  (star_expr ((* expr) `#s(star_expr  $2)))
  (expr((xor_expr)$1)
       ((xor_expr \| expr)`#s(binary \| ,$1 ,$3)))
  (xor_expr ((and_expr)$1)
            ((and_expr ^ xor_expr)`#s(binary ^ ,$1 ,$3)))
  (and_expr ((shift_expr) $1)
            ((shift_expr & and_expr)`#s(binary & ,$1 ,$3)))
  (shift_expr ((arith_expr) $1)
              ((shift_expr <<  arith_expr)`#s(binary << ,$1 ,$3))
              ((shift_expr >>  arith_expr)`#s(binary >> ,$1 ,$3)))
  (arith_expr ((term) $1)
              ((arith_expr + term)`#s(binary + ,$1 ,$3))
              ((arith_expr - term)`#s(binary - ,$1 ,$3)))
  (term ((factor)$1)
        ((term * factor)`#s(binary * ,$1 ,$3))
        ((term / factor)`#s(binary / ,$1 ,$3))
        ((term % factor)`#s(binary remainder  ,$1 ,$3))
        ((term // factor)`#s(binary quotient ,$1 ,$3)))
  (factor
   ((+ factor) (unary '+ $2))
   ((- factor) (unary '- $2))
   ((~ factor) (unary '~ $2))
   ((power) $1))
  (trailer-list ((trailer)(list $1))
                ((trailer trailer-list)(cons $1 $2)))
  (power-item((atom)$1)
             ((atom trailer-list)`#s(trailers ,(cons $1 $2))))
  (power
   ((power-item)$1)
   ((power-item ** factor) `#s(power ,$1 ,$3))
   )
  (string-list ((STRING)(list $1))
               ((STRING string-list)(cons $1 $2)))
  (bytes-list ((BYTES)(list $1))
              ((BYTES bytes-list)(cons $1 $2)))
  (atom
   ((|(| |)|) #s(pytuple()))
   ((|(| yield_expr |)|) `#s(pytuple ,$2))
   ((|(| testlist_comp |)|) (pytuple-testlist_comp $2))
   ((|[| |]|) #s(pylist ()))
   ((|[| testlist_comp |]|) `#s(pylist ,$2))
   ((|{| |}|) #s(pydict ()))
   ((|{| dictorsetmaker |}|) `#s(pydict ,$2))
   ((NAME)  (name  (string->symbol $1)))
   ((NUMBER) $1)
   ((string-list) `#s(str ,(apply string-append $1)))
   ((bytes-list)`#s(bytesstr,(apply bytes-append $1)))
   ((...) '...)
   ((None) #s(None))
   ((True) #s(True))
   ((False) #s(False)))
  (test_or_star_expr ((test)  $1)
                     ((star_expr)  $1))
  (test_or_star_expr-lst((test_or_star_expr |,|)(list $1))
                        ((test_or_star_expr |,| test_or_star_expr)(list $1 $3))
                        ((test_or_star_expr |,| test_or_star_expr-lst)(cons $1 $3)))
  (testlist_comp
   ((test_or_star_expr comp_for) `#s(comp_for $1-start-pos $2-end-pos $1 $2))
   ((test_or_star_expr)$1)
   ((test_or_star_expr-lst)$1))
  (trailer
   ((|(| |)|)  (call '()))
   ((|(| arglist |)|)  (call  $2))
   ((|[| subscriptlist |]|)  (multisubscript  $2))
   ((|[| subscript |]|)  (subscript  (apply slice $2)))
   ((|.| NAME)  (att  (string->symbol $2))))
  (subscriptlist
   ((subscript |,|)$1)
   ((subscript |,| subscript)(list $1 $3))
   ((subscript |,| subscriptlist) (cons $1 $3)))
  (subscript-tail
   ((:) (list #f #f))
   ((: sliceop) (list #f $2))
   ((: test) (list $2 #f))
   ((: test sliceop) (list $2 $3)))
  (subscript
   ((test) (list $1 #f #f))
   ((subscript-tail)(cons #f $1))
   ((test subscript-tail)(cons $1 $2)))
  (sliceop ((:) #f)
           ((: test)  $2))
  (expr_or_star((expr) $1)
               ((star_expr) $1))
  (expr_or_star_list((expr_or_star |,|)(list $1))
                    ((expr_or_star |,| expr_or_star)(list $1 $3))
                    ((expr_or_star |,| expr_or_star_list)(cons $1 $3)))
  (exprlist
   ((expr_or_star)$1)
   ((expr_or_star_list) $1))
  (testlist-multi
   ((test |,| )(list $1))
   ((test |,| test)(list $1 $3))
   ((test |,| testlist-multi) (cons $1 $3)))
  (testlist ((testlist-multi)$1)
            ((test)$1))
  (test:test ((test : test) `#s(key ,$1 ,$3)))
  (test:test_list((test:test |,|)(list $1))
                 ((test:test |,| test:test)(list $1 $3))
                 ((test:test |,| test:test_list)(cons $1 $3)))
  (dictorsetmaker;;;;;;;;;;;;;;;;;;
   ((test:test comp_for) `#s(key_comp_for ,$1 ,$2))
   ((test:test_list)  $1 )
   ((test:test)$1)
   ((test comp_for) `#s(test_comp_for ,$1 ,$2))
   ((testlist) $1)
   ;((test)$1)
   )
  (classdef
   ((class NAME : suite)  (classdef  (string->symbol $2) #f  $4))
   ((class NAME |(| |)| : suite)  (classdef  (string->symbol $2) '()  $6))
   ((class NAME |(| arglist |)| : suite)  (classdef  (string->symbol $2)  $4  $7)))
  (alist ((** test)(list `#s(dict ,$2)))
         ((argument) (list $1))
         ((argument |,| alist) (cons $1 $3)))
  (arglist ((** test) (list `#s(dict ,$2)))
           ((* test) (list `#s(seq ,$2)))
           ((* test |,| alist) (cons `#s(seq ,$2) $4))
           ((argument) (list $1))
           ((argument |,|) (list $1))
           ((argument |,| arglist) (cons $1 $3)))
  (argument
   ((test) $1)
   ((test comp_for) `#s(argument_comp_for ,$1 ,$2));;;;;;;;;;;;;
   ((test = test) `#s(argument_key ,$1 ,$3)));;;;;;;;;;;;
  (comp_iter ((comp_for) $1)
             ((comp_if) $1))
  (comp_for
   ((for exprlist in or_test) `#s(comp_for ,$2 ,$4 #f))
   ((for exprlist in or_test comp_iter) `#s(comp_for ,$2 ,$4 ,$5)))
  (comp_if
   ((if test_nocond) `#s(comp_if ,$2 #f))
   ((if test_nocond comp_iter) `#s(comp_if ,$2 ,$3)))
  (encoding_decl ((NAME) $1))
  (yield_expr ((yield) #s(yield_expr #f))
              ((yield yield_arg) `#s(yield_expr ,$2)))
  (yield_arg ((from test) `#s(yield_arg-from ,$2))
             ((testlist) `#s(yield_arg-list ,$1)))
      ))))